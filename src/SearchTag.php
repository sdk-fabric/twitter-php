<?php
/**
 * SearchTag automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */

namespace SdkFabric\Twitter;

use GuzzleHttp\Exception\BadResponseException;
use Sdkgen\Client\Exception\ClientException;
use Sdkgen\Client\Exception\Payload;
use Sdkgen\Client\Exception\UnknownStatusCodeException;
use Sdkgen\Client\TagAbstract;

class SearchTag extends TagAbstract
{
    /**
     * @param string|null $query
     * @param string|null $sortOrder
     * @param string|null $expansions
     * @param Pagination|null $pagination
     * @param Fields|null $fields
     * @return TweetCollection
     * @throws ErrorsException
     * @throws ClientException
     */
    public function getRecent(?string $query = null, ?string $sortOrder = null, ?string $expansions = null, ?Pagination $pagination = null, ?Fields $fields = null): TweetCollection
    {
        $url = $this->parser->url('/2/tweets/search/recent', [
        ]);

        $options = [
            'headers' => [
            ],
            'query' => $this->parser->query([
                'query' => $query,
                'sort_order' => $sortOrder,
                'expansions' => $expansions,
                'pagination' => $pagination,
                'fields' => $fields,
            ], [
                'pagination',
                'fields',
            ]),
        ];

        try {
            $response = $this->httpClient->request('GET', $url, $options);
            $body = $response->getBody();

            $data = $this->parser->parse((string) $body, \PSX\Schema\SchemaSource::fromClass(TweetCollection::class));

            return $data;
        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $body = $e->getResponse()->getBody();
            $statusCode = $e->getResponse()->getStatusCode();

            if ($statusCode >= 0 && $statusCode <= 999) {
                $data = $this->parser->parse((string) $body, \PSX\Schema\SchemaSource::fromClass(Errors::class));

                throw new ErrorsException($data);
            }

            throw new UnknownStatusCodeException('The server returned an unknown status code: ' . $statusCode);
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }



}
